// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64) && linux

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type sampler_kernCounters struct {
	Packets uint64
	Bytes   uint64
}

// loadSampler_kern returns the embedded CollectionSpec for sampler_kern.
func loadSampler_kern() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Sampler_kernBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load sampler_kern: %w", err)
	}

	return spec, err
}

// loadSampler_kernObjects loads sampler_kern and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*sampler_kernObjects
//	*sampler_kernPrograms
//	*sampler_kernMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSampler_kernObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSampler_kern()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// sampler_kernSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sampler_kernSpecs struct {
	sampler_kernProgramSpecs
	sampler_kernMapSpecs
	sampler_kernVariableSpecs
}

// sampler_kernProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sampler_kernProgramSpecs struct {
	SamplerFn *ebpf.ProgramSpec `ebpf:"sampler_fn"`
}

// sampler_kernMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sampler_kernMapSpecs struct {
	ActionCounters *ebpf.MapSpec `ebpf:"action_counters"`
	PacketCount    *ebpf.MapSpec `ebpf:"packet_count"`
	SampleRate     *ebpf.MapSpec `ebpf:"sample_rate"`
	Samples        *ebpf.MapSpec `ebpf:"samples"`
}

// sampler_kernVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sampler_kernVariableSpecs struct {
}

// sampler_kernObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSampler_kernObjects or ebpf.CollectionSpec.LoadAndAssign.
type sampler_kernObjects struct {
	sampler_kernPrograms
	sampler_kernMaps
	sampler_kernVariables
}

func (o *sampler_kernObjects) Close() error {
	return _Sampler_kernClose(
		&o.sampler_kernPrograms,
		&o.sampler_kernMaps,
	)
}

// sampler_kernMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSampler_kernObjects or ebpf.CollectionSpec.LoadAndAssign.
type sampler_kernMaps struct {
	ActionCounters *ebpf.Map `ebpf:"action_counters"`
	PacketCount    *ebpf.Map `ebpf:"packet_count"`
	SampleRate     *ebpf.Map `ebpf:"sample_rate"`
	Samples        *ebpf.Map `ebpf:"samples"`
}

func (m *sampler_kernMaps) Close() error {
	return _Sampler_kernClose(
		m.ActionCounters,
		m.PacketCount,
		m.SampleRate,
		m.Samples,
	)
}

// sampler_kernVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadSampler_kernObjects or ebpf.CollectionSpec.LoadAndAssign.
type sampler_kernVariables struct {
}

// sampler_kernPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSampler_kernObjects or ebpf.CollectionSpec.LoadAndAssign.
type sampler_kernPrograms struct {
	SamplerFn *ebpf.Program `ebpf:"sampler_fn"`
}

func (p *sampler_kernPrograms) Close() error {
	return _Sampler_kernClose(
		p.SamplerFn,
	)
}

func _Sampler_kernClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sampler_kern_bpfel.o
var _Sampler_kernBytes []byte
